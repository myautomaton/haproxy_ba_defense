global
    # lua-load    /etc/haproxy/lua_scripts/00_client_fetches.lua
    lua-load    /etc/haproxy/lua_scripts/01_sql_injection.lua
    lua-load    /etc/haproxy/lua_scripts/06_header_manipulation.lua
    lua-load    /etc/haproxy/lua_scripts/07_external_authentication.lua
    lua-load    /etc/haproxy/lua_scripts/09_browser_detection.lua
    lua-load    /etc/haproxy/lua_scripts/10_coockies.lua
    lua-load    /etc/haproxy/lua_scripts/11_lfi.lua
    lua-load    /etc/haproxy/lua_scripts/12_rfi.lua
    lua-load    /etc/haproxy/lua_scripts/13_xss.lua
    lua-load    /etc/haproxy/lua_scripts/14_admin_path.lua
    lua-load    /etc/haproxy/lua_scripts/15_log4j.lua
    lua-load    /etc/haproxy/lua_scripts/16_bot_detection.lua
    lua-load    /etc/haproxy/lua_scripts/http_redirect.lua
    lua-load    /etc/haproxy/lua_scripts/replace_in_path.lua
    lua-load    /etc/haproxy/lua_scripts/logs.lua
    lua-load    /etc/haproxy/lua_scripts/greater_than.lua
    # lua-load    /etc/haproxy/lua_scripts/backends.lua
    log         127.0.0.1 local2 debug
    # chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     1000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats level admin

    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2

http-errors myerrors
  errorfile 404 /etc/haproxy/pages/404.http

defaults
    log                     global
    option                  dontlognull
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 100000
    

listen  stats   
    mode http
    bind *:8404
    log             global

    maxconn 10

    timeout queue   100s

    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats auth    admin:123456
    stats uri  /haproxy?stats

frontend publicweb
    bind *:80
    bind *:15081
    bind *:15082
    option forwardfor
    log-format %H\ %ci\ -\ [%t]\ %{+Q}r\ %ST\ -\ %U\ {+Q}[req.hdr(host)]\ %{+Q}CC\ %Tq\ %{+Q}s\ “-”

    errorfiles myerrors

    mode http
    option forwardfor
    option httplog

    #SQL Injection
    http-request set-var(req.check_sql_injection) lua.check_sql_injection
    http-request use-service lua.deny_sql_injection if { var(req.check_sql_injection) -m bool }

    #Custom logs
    http-response lua.log_response_time

    #RATE
    # Store the threshold in a variable
    http-request set-var(txn.connrate_threshold) int(100)
    stick-table type ip size 32m expire 30s store conn_rate(10s)
    http-request track-sc0 src
    # Store the connection rate in a variable
    http-request set-var(txn.conn_rate) src_conn_rate
    # Deny if rate is greater than threshold
    http-request deny if { lua.greater_than(txn.conn_rate,txn.connrate_threshold) -m bool }

    # BASED ON PORT
    http-request set-var(req.backend_name) lua.port_redirect
    acl check_backend_port var(req.backend_name) -m beg nobkselected
    use_backend %[var(req.backend_name)] if !check_backend_port

    # BACKEND SELECTION
    # BASED ON PATH /foo
    http-request set-var(req.backend_name) lua.path_redirect
    acl check_backend var(req.backend_name) -m beg nobkselected
    use_backend %[var(req.backend_name)] if !check_backend

    # #PATH MANIPULATION
    http-request set-var(req.new_path) lua.new_path
    http-request set-var(txn.path) lua.new_path
    http-request set-path %[var(req.new_path)]

    # BLACKLIST
    http-request set-var(req.xff) lua.inspect_x_forwarded_for
    http-request deny if { var(req.xff) -m bool }

    # AUTH
    http-request set-var(req.check_user_authenticated) lua.user_authenticated if { path_beg /user }
    http-request deny if !{ var(req.check_user_authenticated) -m bool } { path_beg /user }

    # #BACKENDS
    # # http-request lua.check_backend_status
    
    # # Check if the backend's circuit is open
    # #http-request lua.circuit_breaker_check

    # # http-request lua.check_jwt_token

    # GEO BLOCKING
    acl geo_block_br src -f /etc/haproxy/geodb/BR.acl
    acl geo_block_br_x hdr_ip(X-Forwarded-For) -f /etc/haproxy/geodb/BR.acl
    http-request deny if geo_block_br
    http-request deny if geo_block_br_x

    # browser detection
    http-request set-var(req.browser_status) lua.check_browser if { path_beg /browser }
    http-request use-service lua.download_browser if { var(req.browser_status) -m bool } { path_beg /browser }

    #WHITELIST
    acl network_whitelist src -f /etc/haproxy/whitelist.acl
    acl network_whitelist_x hdr_ip(X-Forwarded-For) -f /etc/haproxy/whitelist.acl

    # coockie
    http-request set-var(req.cookies_size_status) lua.validate_cookie_size if { path_beg /coockie }
    http-request use-service lua.coockie_block if { var(req.cookies_size_status) -m bool } { path_beg /coockie }

    # lfi
    http-request set-var(req.lfi_status) lua.detect_lfi
    http-request use-service lua.lfi_block if { var(req.lfi_status) -m bool }

    # lfi
    http-request set-var(req.rfi_status) lua.detect_rfi
    http-request use-service lua.rfi_block if { var(req.rfi_status) -m bool }

    # XSS
    http-request set-var(req.xss_status) lua.detect_xss
    http-request use-service lua.xss_block if { var(req.xss_status) -m bool }

    # ADMIN PATH
    http-request set-var(req.admin_path_status) lua.detect_admin_path
    http-request use-service lua.admin_path_block if { var(req.admin_path_status) -m bool } !network_whitelist_x

    # Log4j
    http-request set-var(req.log4j_status) lua.detect_log4j
    http-request use-service lua.log4j_block if { var(req.log4j_status) -m bool }

    # BOTS
    http-request set-var(req.bot_status) lua.detect_bots
    http-request use-service lua.bot_block if { var(req.bot_status) -m bool }

    #silent drop
    http-request silent-drop if { path_beg /silent-drop }



    # #DEFAULT BACKEND
    # use_backend %[var(req.backend_name)]

    #http-request lua.my_lua_service if { path /lua-service }
    #http-request use-service lua.my_lua_service if { var(req.hello) -m bool }

    # DEFAULT!
    default_backend maintenance
    errorfiles myerrors
    http-response return  status 404  default-errorfiles  if { status 404 }

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#--------------------------------------------------------------------
    
backend apache
    balance  roundrobin
    mode http
    option httpchk GET /
    http-check expect status 200
    server     apache1 10.201.0.11:80
    server     apache2 10.201.0.12:80

backend backend1
    balance  roundrobin
    mode http
    option httpchk GET /

    http-check expect status 200
    server     backend1 10.201.0.11:80

    #http-response lua.monitor_backend_response

backend backend2
    balance  roundrobin
    mode http
    option httpchk GET /
    http-check expect status 200

    server     backend2 10.201.0.12:80 check maxconn 2000 inter 5s fall 3 rise 10

backend maintenance
    balance  roundrobin
    mode http
    option httpchk GET /
    http-check expect status 200
    server     apache1 10.201.0.13:80
